// *** vertex shader ***
	
// variables linked with the fragment shader (varying)
varying vec2 vTextureCoord;
varying vec3 vLightWeighting;
	
// vertex features (attribute)
attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aTextureCoord;

// arguments chosen by the user (uniform)
uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;
uniform mat3 uNMatrix;

uniform vec3 uAmbientColor;

uniform vec3 uLightingDirection;
uniform vec3 uDirectionalColor;

uniform bool uUseLighting;

void main(void)
{
    // vertex position
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

    // vertex texture coord
    vTextureCoord = aTextureCoord;

    // lighting
    if (!uUseLighting)
    {
		vLightWeighting = vec3(1.0, 1.0, 1.0);
    }
    else
    {
		// light weighting calculation : ambient color + diffuse color (+ specular color)
		vec3 transformedNormal = uNMatrix * aVertexNormal;
		float directionalLightWeighting = max(dot(transformedNormal, uLightingDirection), 0.0);
		vLightWeighting = uAmbientColor + uDirectionalColor * directionalLightWeighting;
    }
}